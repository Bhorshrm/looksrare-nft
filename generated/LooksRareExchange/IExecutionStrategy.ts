// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IExecutionStrategy__canExecuteTakerAskResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class IExecutionStrategy__canExecuteTakerAskInputTakerAskStruct extends ethereum.Tuple {
  get isOrderAsk(): boolean {
    return this[0].toBoolean();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get minPercentageToAsk(): BigInt {
    return this[4].toBigInt();
  }

  get params(): Bytes {
    return this[5].toBytes();
  }
}

export class IExecutionStrategy__canExecuteTakerAskInputMakerBidStruct extends ethereum.Tuple {
  get isOrderAsk(): boolean {
    return this[0].toBoolean();
  }

  get signer(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get strategy(): Address {
    return this[6].toAddress();
  }

  get currency(): Address {
    return this[7].toAddress();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get startTime(): BigInt {
    return this[9].toBigInt();
  }

  get endTime(): BigInt {
    return this[10].toBigInt();
  }

  get minPercentageToAsk(): BigInt {
    return this[11].toBigInt();
  }

  get params(): Bytes {
    return this[12].toBytes();
  }

  get v(): i32 {
    return this[13].toI32();
  }

  get r(): Bytes {
    return this[14].toBytes();
  }

  get s(): Bytes {
    return this[15].toBytes();
  }
}

export class IExecutionStrategy__canExecuteTakerBidResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class IExecutionStrategy__canExecuteTakerBidInputTakerBidStruct extends ethereum.Tuple {
  get isOrderAsk(): boolean {
    return this[0].toBoolean();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get minPercentageToAsk(): BigInt {
    return this[4].toBigInt();
  }

  get params(): Bytes {
    return this[5].toBytes();
  }
}

export class IExecutionStrategy__canExecuteTakerBidInputMakerAskStruct extends ethereum.Tuple {
  get isOrderAsk(): boolean {
    return this[0].toBoolean();
  }

  get signer(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get strategy(): Address {
    return this[6].toAddress();
  }

  get currency(): Address {
    return this[7].toAddress();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get startTime(): BigInt {
    return this[9].toBigInt();
  }

  get endTime(): BigInt {
    return this[10].toBigInt();
  }

  get minPercentageToAsk(): BigInt {
    return this[11].toBigInt();
  }

  get params(): Bytes {
    return this[12].toBytes();
  }

  get v(): i32 {
    return this[13].toI32();
  }

  get r(): Bytes {
    return this[14].toBytes();
  }

  get s(): Bytes {
    return this[15].toBytes();
  }
}

export class IExecutionStrategy extends ethereum.SmartContract {
  static bind(address: Address): IExecutionStrategy {
    return new IExecutionStrategy("IExecutionStrategy", address);
  }

  canExecuteTakerAsk(
    takerAsk: IExecutionStrategy__canExecuteTakerAskInputTakerAskStruct,
    makerBid: IExecutionStrategy__canExecuteTakerAskInputMakerBidStruct
  ): IExecutionStrategy__canExecuteTakerAskResult {
    let result = super.call(
      "canExecuteTakerAsk",
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)):(bool,uint256,uint256)",
      [ethereum.Value.fromTuple(takerAsk), ethereum.Value.fromTuple(makerBid)]
    );

    return new IExecutionStrategy__canExecuteTakerAskResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_canExecuteTakerAsk(
    takerAsk: IExecutionStrategy__canExecuteTakerAskInputTakerAskStruct,
    makerBid: IExecutionStrategy__canExecuteTakerAskInputMakerBidStruct
  ): ethereum.CallResult<IExecutionStrategy__canExecuteTakerAskResult> {
    let result = super.tryCall(
      "canExecuteTakerAsk",
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)):(bool,uint256,uint256)",
      [ethereum.Value.fromTuple(takerAsk), ethereum.Value.fromTuple(makerBid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IExecutionStrategy__canExecuteTakerAskResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  canExecuteTakerBid(
    takerBid: IExecutionStrategy__canExecuteTakerBidInputTakerBidStruct,
    makerAsk: IExecutionStrategy__canExecuteTakerBidInputMakerAskStruct
  ): IExecutionStrategy__canExecuteTakerBidResult {
    let result = super.call(
      "canExecuteTakerBid",
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)):(bool,uint256,uint256)",
      [ethereum.Value.fromTuple(takerBid), ethereum.Value.fromTuple(makerAsk)]
    );

    return new IExecutionStrategy__canExecuteTakerBidResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_canExecuteTakerBid(
    takerBid: IExecutionStrategy__canExecuteTakerBidInputTakerBidStruct,
    makerAsk: IExecutionStrategy__canExecuteTakerBidInputMakerAskStruct
  ): ethereum.CallResult<IExecutionStrategy__canExecuteTakerBidResult> {
    let result = super.tryCall(
      "canExecuteTakerBid",
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32)):(bool,uint256,uint256)",
      [ethereum.Value.fromTuple(takerBid), ethereum.Value.fromTuple(makerAsk)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IExecutionStrategy__canExecuteTakerBidResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  viewProtocolFee(): BigInt {
    let result = super.call(
      "viewProtocolFee",
      "viewProtocolFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_viewProtocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewProtocolFee",
      "viewProtocolFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
