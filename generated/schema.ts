// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalTakerBidTransactions(): BigInt {
    let value = this.get("totalTakerBidTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTakerBidTransactions(value: BigInt) {
    this.set("totalTakerBidTransactions", Value.fromBigInt(value));
  }

  get totalTakerAskTransactions(): BigInt {
    let value = this.get("totalTakerAskTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTakerAskTransactions(value: BigInt) {
    this.set("totalTakerAskTransactions", Value.fromBigInt(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get totalTakerBidVolume(): BigDecimal {
    let value = this.get("totalTakerBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTakerBidVolume(value: BigDecimal) {
    this.set("totalTakerBidVolume", Value.fromBigDecimal(value));
  }

  get totalTakerAskVolume(): BigDecimal {
    let value = this.get("totalTakerAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTakerAskVolume(value: BigDecimal) {
    this.set("totalTakerAskVolume", Value.fromBigDecimal(value));
  }

  get totalRoyaltyPaid(): BigDecimal {
    let value = this.get("totalRoyaltyPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalRoyaltyPaid(value: BigDecimal) {
    this.set("totalRoyaltyPaid", Value.fromBigDecimal(value));
  }

  get dayData(): Array<string> {
    let value = this.get("dayData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get royaltyTransfers(): Array<string> {
    let value = this.get("royaltyTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class ExecutionStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutionStrategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutionStrategy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutionStrategy", id.toString(), this);
    }
  }

  static load(id: string): ExecutionStrategy | null {
    return changetype<ExecutionStrategy | null>(
      store.get("ExecutionStrategy", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalTakerBidTransactions(): BigInt {
    let value = this.get("totalTakerBidTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTakerBidTransactions(value: BigInt) {
    this.set("totalTakerBidTransactions", Value.fromBigInt(value));
  }

  get totalTakerAskTransactions(): BigInt {
    let value = this.get("totalTakerAskTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTakerAskTransactions(value: BigInt) {
    this.set("totalTakerAskTransactions", Value.fromBigInt(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get totalTakerBidVolume(): BigDecimal {
    let value = this.get("totalTakerBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTakerBidVolume(value: BigDecimal) {
    this.set("totalTakerBidVolume", Value.fromBigDecimal(value));
  }

  get totalTakerAskVolume(): BigDecimal {
    let value = this.get("totalTakerAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTakerAskVolume(value: BigDecimal) {
    this.set("totalTakerAskVolume", Value.fromBigDecimal(value));
  }

  get dayData(): Array<string> {
    let value = this.get("dayData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalAskVolume(): BigDecimal {
    let value = this.get("totalAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalAskVolume(value: BigDecimal) {
    this.set("totalAskVolume", Value.fromBigDecimal(value));
  }

  get totalBidVolume(): BigDecimal {
    let value = this.get("totalBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBidVolume(value: BigDecimal) {
    this.set("totalBidVolume", Value.fromBigDecimal(value));
  }

  get totalMakerVolume(): BigDecimal {
    let value = this.get("totalMakerVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalMakerVolume(value: BigDecimal) {
    this.set("totalMakerVolume", Value.fromBigDecimal(value));
  }

  get totalTakerVolume(): BigDecimal {
    let value = this.get("totalTakerVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTakerVolume(value: BigDecimal) {
    this.set("totalTakerVolume", Value.fromBigDecimal(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get totalRoyaltyCollected(): BigDecimal {
    let value = this.get("totalRoyaltyCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalRoyaltyCollected(value: BigDecimal) {
    this.set("totalRoyaltyCollected", Value.fromBigDecimal(value));
  }

  get dayData(): Array<string> {
    let value = this.get("dayData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get makerTransactions(): Array<string> {
    let value = this.get("makerTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get takerTransactions(): Array<string> {
    let value = this.get("takerTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get royaltyPayments(): Array<string> {
    let value = this.get("royaltyPayments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class CollectionDailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionDailyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionDailyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionDailyData", id.toString(), this);
    }
  }

  static load(id: string): CollectionDailyData | null {
    return changetype<CollectionDailyData | null>(
      store.get("CollectionDailyData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get dailyTransactions(): BigInt {
    let value = this.get("dailyTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTransactions(value: BigInt) {
    this.set("dailyTransactions", Value.fromBigInt(value));
  }

  get dailyTakerBidTransactions(): BigInt {
    let value = this.get("dailyTakerBidTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerBidTransactions(value: BigInt) {
    this.set("dailyTakerBidTransactions", Value.fromBigInt(value));
  }

  get dailyTakerAskTransactions(): BigInt {
    let value = this.get("dailyTakerAskTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerAskTransactions(value: BigInt) {
    this.set("dailyTakerAskTransactions", Value.fromBigInt(value));
  }

  get dailyVolume(): BigDecimal {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolume(value: BigDecimal) {
    this.set("dailyVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerBidVolume(): BigDecimal {
    let value = this.get("dailyTakerBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerBidVolume(value: BigDecimal) {
    this.set("dailyTakerBidVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerAskVolume(): BigDecimal {
    let value = this.get("dailyTakerAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerAskVolume(value: BigDecimal) {
    this.set("dailyTakerAskVolume", Value.fromBigDecimal(value));
  }

  get dailyVolumeExcludingZeroFee(): BigDecimal {
    let value = this.get("dailyVolumeExcludingZeroFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolumeExcludingZeroFee(value: BigDecimal) {
    this.set("dailyVolumeExcludingZeroFee", Value.fromBigDecimal(value));
  }

  get dailyRoyalty(): BigDecimal {
    let value = this.get("dailyRoyalty");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyRoyalty(value: BigDecimal) {
    this.set("dailyRoyalty", Value.fromBigDecimal(value));
  }
}

export class ExchangeDailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExchangeDailyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeDailyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeDailyData", id.toString(), this);
    }
  }

  static load(id: string): ExchangeDailyData | null {
    return changetype<ExchangeDailyData | null>(
      store.get("ExchangeDailyData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get dailyUsers(): BigInt {
    let value = this.get("dailyUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyUsers(value: BigInt) {
    this.set("dailyUsers", Value.fromBigInt(value));
  }

  get dailyCollections(): BigInt {
    let value = this.get("dailyCollections");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyCollections(value: BigInt) {
    this.set("dailyCollections", Value.fromBigInt(value));
  }

  get dailyTransactions(): BigInt {
    let value = this.get("dailyTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTransactions(value: BigInt) {
    this.set("dailyTransactions", Value.fromBigInt(value));
  }

  get dailyTakerBidTransactions(): BigInt {
    let value = this.get("dailyTakerBidTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerBidTransactions(value: BigInt) {
    this.set("dailyTakerBidTransactions", Value.fromBigInt(value));
  }

  get dailyTakerAskTransactions(): BigInt {
    let value = this.get("dailyTakerAskTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerAskTransactions(value: BigInt) {
    this.set("dailyTakerAskTransactions", Value.fromBigInt(value));
  }

  get dailyVolume(): BigDecimal {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolume(value: BigDecimal) {
    this.set("dailyVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerBidVolume(): BigDecimal {
    let value = this.get("dailyTakerBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerBidVolume(value: BigDecimal) {
    this.set("dailyTakerBidVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerAskVolume(): BigDecimal {
    let value = this.get("dailyTakerAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerAskVolume(value: BigDecimal) {
    this.set("dailyTakerAskVolume", Value.fromBigDecimal(value));
  }

  get dailyVolumeExcludingZeroFee(): BigDecimal {
    let value = this.get("dailyVolumeExcludingZeroFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolumeExcludingZeroFee(value: BigDecimal) {
    this.set("dailyVolumeExcludingZeroFee", Value.fromBigDecimal(value));
  }
}

export class ExecutionStrategyDailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecutionStrategyDailyData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutionStrategyDailyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutionStrategyDailyData", id.toString(), this);
    }
  }

  static load(id: string): ExecutionStrategyDailyData | null {
    return changetype<ExecutionStrategyDailyData | null>(
      store.get("ExecutionStrategyDailyData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get dailyTransactions(): BigInt {
    let value = this.get("dailyTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTransactions(value: BigInt) {
    this.set("dailyTransactions", Value.fromBigInt(value));
  }

  get dailyTakerBidTransactions(): BigInt {
    let value = this.get("dailyTakerBidTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerBidTransactions(value: BigInt) {
    this.set("dailyTakerBidTransactions", Value.fromBigInt(value));
  }

  get dailyTakerAskTransactions(): BigInt {
    let value = this.get("dailyTakerAskTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTakerAskTransactions(value: BigInt) {
    this.set("dailyTakerAskTransactions", Value.fromBigInt(value));
  }

  get dailyVolume(): BigDecimal {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolume(value: BigDecimal) {
    this.set("dailyVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerBidVolume(): BigDecimal {
    let value = this.get("dailyTakerBidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerBidVolume(value: BigDecimal) {
    this.set("dailyTakerBidVolume", Value.fromBigDecimal(value));
  }

  get dailyTakerAskVolume(): BigDecimal {
    let value = this.get("dailyTakerAskVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTakerAskVolume(value: BigDecimal) {
    this.set("dailyTakerAskVolume", Value.fromBigDecimal(value));
  }
}

export class UserDailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDailyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserDailyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserDailyData", id.toString(), this);
    }
  }

  static load(id: string): UserDailyData | null {
    return changetype<UserDailyData | null>(store.get("UserDailyData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get dailyTransactions(): BigInt {
    let value = this.get("dailyTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyTransactions(value: BigInt) {
    this.set("dailyTransactions", Value.fromBigInt(value));
  }

  get dailyVolume(): BigDecimal {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolume(value: BigDecimal) {
    this.set("dailyVolume", Value.fromBigDecimal(value));
  }

  get dailyVolumeExcludingZeroFee(): BigDecimal {
    let value = this.get("dailyVolumeExcludingZeroFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolumeExcludingZeroFee(value: BigDecimal) {
    this.set("dailyVolumeExcludingZeroFee", Value.fromBigDecimal(value));
  }
}

export class RoyaltyTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoyaltyTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoyaltyTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoyaltyTransfer", id.toString(), this);
    }
  }

  static load(id: string): RoyaltyTransfer | null {
    return changetype<RoyaltyTransfer | null>(store.get("RoyaltyTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get isTakerAsk(): boolean {
    let value = this.get("isTakerAsk");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isTakerAsk(value: boolean) {
    this.set("isTakerAsk", Value.fromBoolean(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get maker(): string {
    let value = this.get("maker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get taker(): string {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set taker(value: string) {
    this.set("taker", Value.fromString(value));
  }
}
